import argparse
from Crypto.Hash import SHA1, MD5, HMAC

Ni = b'\xf4\x52\x34\xb5\x75\xfa\x02\xbd\xbf\xd7\x17\x08\x1e\x92\x86\x8f\x5e\x2d\x37\x73'
Nr = b'\x1f\x26\x43\x6f\x8a\xe5\x0d\x3a\xad\x80\x5d\x26\xad\x4d\x75\x12\xa7\xe7\x2a\x81'
g_x = b'\x2f\x7c\x49\x1c\x67\xe3\x60\x9a\x09\xc4\xe0\x33\x42\xf7\x45\x7e' \
      b'\xf4\xb8\x43\x92\x66\xdb\xa0\x7e\xfb\xd8\x91\x87\x45\x42\xde\x21' \
      b'\x2d\x3c\xc3\xcc\x02\x74\xe6\x80\xe7\xad\xee\x2c\x34\x76\xd1\xe6' \
      b'\x1d\xfe\xfa\x75\x03\x93\x92\xe0\x70\x5a\xe7\xb1\xe0\x01\x2b\xda' \
      b'\xbc\x06\xcf\xbc\x43\xf3\xcd\x25\xd5\xac\x8c\xb0\xd9\xae\x34\x5c' \
      b'\x61\xfb\x91\xf1\x20\xa1\xd4\x05\xda\xae\xaf\xdb\x27\x5d\x3f\x33' \
      b'\xbf\xdd\xd7\xd2\xd8\x56\x2f\xa8\x12\x19\x0e\x97\x70\x74\xfb\x17' \
      b'\x71\x88\x88\x6d\x6a\xe8\x84\xad\x1c\x0f\xbc\xe3\xf0\x6b\x4f\x07'
g_y = b'\x6d\x02\x6d\x56\x16\xc4\x5b\xe0\x5e\x5b\x89\x84\x11\xe9\xf9\x5d' \
      b'\x19\x5c\xea\x00\x9a\xd2\x2c\x62\xbe\xf0\x6c\x57\x1b\x7c\xfb\xc4' \
      b'\x79\x2f\x45\x56\x4e\xc7\x10\xac\x58\x4a\xa1\x8d\x20\xcb\xc8\xf5' \
      b'\xf8\x91\x06\x66\xb8\x9e\x4e\xe2\xf9\x5a\xbc\x02\x30\xe2\xcb\xa1' \
      b'\xb8\x8a\xc4\xbb\xa7\xfc\xc8\x18\xa9\x86\xc0\x1a\x4c\xa8\x65\xa5' \
      b'\xeb\x82\x88\x4d\xbe\xc8\x5b\xfd\x7d\x1a\x30\x3b\x09\x89\x4d\xcf' \
      b'\x2e\x37\x85\xfd\x79\xdb\xa2\x25\x37\x7c\xf8\xcc\xa0\x09\xce\xff' \
      b'\xbb\x6a\xa3\x8b\x64\x8c\x4b\x05\x40\x4f\x1c\xfa\xac\x36\x1a\xff'
Ci = b'\xe4\x7a\x59\x1f\x78\xc9\x9d\x7f'
Cr = b'\xa0\x0b\x8e\xf0\xea\x9f\xf8\x83'
SAi = b'\x00\x00\x00\x01\x00\x00\x00\x30\x01\x01\x00\x01\x00\x00\x00\x28' \
      b'\x01\x01\x00\x00\x80\x01\x00\x07\x80\x0e\x00\x80\x80\x02\x00\x02' \
      b'\x80\x04\x00\x02\x80\x03\x00\x01\x80\x0b\x00\x01\x00\x0c\x00\x04\x00\x01\x51\x80'
IDi = b'\x01\x11\x00\x00\xc0\xa8\x0c\x02'


def generate(parole: bytes, hash_):
    SKEYID = HMAC.new(parole, b''.join([Ni, Nr]), hash_).digest()
    HASH = HMAC.new(SKEYID, b''.join([g_x, g_y, Ci, Cr, SAi, IDi])).digest()
    return HASH


def main():
    parser = argparse.ArgumentParser(description="Generator of hashes for protocol IKEv1 Aggressive mode")
    parser.add_argument('-m', choices=["sha1", "md5"], required=True, help="Hash function for generation")
    parser.add_argument('-p', required=True, help="Parole for generation, string in UTF-8")
    args = parser.parse_args()
    hash_function = args.m
    parole = args.p
    if hash_function == 'sha1':
        hash_ = SHA1
    else:
        hash_ = MD5
    HASH = generate(parole.encode(), hash_)
    with open(f"{parole}_{hash_function}.txt", 'w') as f:
        f.write(f'{Ni.hex()}*{Nr.hex()}*{g_x.hex()}*{g_y.hex()}*{Ci.hex()}*{Cr.hex()}*{SAi.hex()}*{IDi.hex()}'
                f'*{HASH.hex()}')


if __name__ == '__main__':
    main()
